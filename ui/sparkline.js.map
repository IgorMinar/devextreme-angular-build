{"version":3,"file":"sparkline.js","sourceRoot":"","sources":["sparkline.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * devextreme-angular\n * Version: 19.1.6\n * Build date: Fri Sep 20 2019\n *\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\n *\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file in the root of the project for details.\n *\n * https://github.com/DevExpress/devextreme-angular\n */\n\n/* tslint:disable:max-line-length */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport { BrowserTransferStateModule } from '@angular/platform-browser';\r\nimport { TransferState } from '@angular/platform-browser';\r\n\r\nimport {\r\n    Component,\r\n    NgModule,\r\n    ElementRef,\r\n    NgZone,\r\n    PLATFORM_ID,\r\n    Inject,\r\n\r\n    Input,\r\n    Output,\r\n    OnDestroy,\r\n    EventEmitter,\r\n    OnChanges,\r\n    DoCheck,\r\n    SimpleChanges\r\n} from '@angular/core';\r\n\r\n\r\nimport DevExpress from 'devextreme/bundles/dx.all';\r\n\r\nimport DxSparkline from 'devextreme/viz/sparkline';\r\n\r\n\r\nimport { DxComponent } from '../core/component';\r\nimport { DxTemplateHost } from '../core/template-host';\r\nimport { DxIntegrationModule } from '../core/integration';\r\nimport { DxTemplateModule } from '../core/template';\r\nimport { NestedOptionHost } from '../core/nested-option';\r\nimport { WatcherHelper } from '../core/watcher-helper';\r\nimport { IterableDifferHelper } from '../core/iterable-differ-helper';\r\n\r\nimport { DxoMarginModule } from './nested/margin';\r\nimport { DxoSizeModule } from './nested/size';\r\nimport { DxoTooltipModule } from './nested/tooltip';\r\nimport { DxoBorderModule } from './nested/border';\r\nimport { DxoFontModule } from './nested/font';\r\nimport { DxoFormatModule } from './nested/format';\r\nimport { DxoShadowModule } from './nested/shadow';\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * The Sparkline widget is a compact chart that contains only one series. Owing to their size, sparklines occupy very little space and can be easily collected in a table or embedded straight in text.\r\n */\r\n@Component({\r\n    selector: 'dx-sparkline',\r\n    template: '',\r\n    styles: [ ' :host {  display: block; }'],\r\n    providers: [\r\n        DxTemplateHost,\r\n        WatcherHelper,\r\n        NestedOptionHost,\r\n        IterableDifferHelper\r\n    ]\r\n})\r\nexport class DxSparklineComponent extends DxComponent implements OnDestroy, OnChanges, DoCheck {\r\n    instance: DxSparkline;\r\n\r\n\r\n    /**\r\n     * Specifies the data source field that provides arguments for a sparkline.\r\n     */\r\n    @Input()\r\n    get argumentField(): string {\r\n        return this._getOption('argumentField');\r\n    }\r\n    set argumentField(value: string) {\r\n        this._setOption('argumentField', value);\r\n    }\r\n\r\n\r\n    /**\r\n     * Sets a color for the bars indicating negative values. Available for a sparkline of the bar type only.\r\n     */\r\n    @Input()\r\n    get barNegativeColor(): string {\r\n        return this._getOption('barNegativeColor');\r\n    }\r\n    set barNegativeColor(value: string) {\r\n        this._setOption('barNegativeColor', value);\r\n    }\r\n\r\n\r\n    /**\r\n     * Sets a color for the bars indicating positive values. Available for a sparkline of the bar type only.\r\n     */\r\n    @Input()\r\n    get barPositiveColor(): string {\r\n        return this._getOption('barPositiveColor');\r\n    }\r\n    set barPositiveColor(value: string) {\r\n        this._setOption('barPositiveColor', value);\r\n    }\r\n\r\n\r\n    /**\r\n     * Binds the widget to data.\r\n     */\r\n    @Input()\r\n    get dataSource(): DevExpress.data.DataSource | DevExpress.data.DataSourceOptions | string | Array<any> {\r\n        return this._getOption('dataSource');\r\n    }\r\n    set dataSource(value: DevExpress.data.DataSource | DevExpress.data.DataSourceOptions | string | Array<any>) {\r\n        this._setOption('dataSource', value);\r\n    }\r\n\r\n\r\n    /**\r\n     * Specifies whether the widget responds to the user interaction.\r\n     */\r\n    @Input()\r\n    get disabled(): boolean {\r\n        return this._getOption('disabled');\r\n    }\r\n    set disabled(value: boolean) {\r\n        this._setOption('disabled', value);\r\n    }\r\n\r\n\r\n    /**\r\n     * Specifies the attributes to be attached to the widget's root element.\r\n     */\r\n    @Input()\r\n    get elementAttr(): any {\r\n        return this._getOption('elementAttr');\r\n    }\r\n    set elementAttr(value: any) {\r\n        this._setOption('elementAttr', value);\r\n    }\r\n\r\n\r\n    /**\r\n     * Sets a color for the boundary of both the first and last points on a sparkline.\r\n     */\r\n    @Input()\r\n    get firstLastColor(): string {\r\n        return this._getOption('firstLastColor');\r\n    }\r\n    set firstLastColor(value: string) {\r\n        this._setOption('firstLastColor', value);\r\n    }\r\n\r\n\r\n    /**\r\n     * Specifies whether the sparkline should ignore null data points.\r\n     */\r\n    @Input()\r\n    get ignoreEmptyPoints(): boolean {\r\n        return this._getOption('ignoreEmptyPoints');\r\n    }\r\n    set ignoreEmptyPoints(value: boolean) {\r\n        this._setOption('ignoreEmptyPoints', value);\r\n    }\r\n\r\n\r\n    /**\r\n     * Sets a color for a line on a sparkline. Available for the sparklines of the line- and area-like types.\r\n     */\r\n    @Input()\r\n    get lineColor(): string {\r\n        return this._getOption('lineColor');\r\n    }\r\n    set lineColor(value: string) {\r\n        this._setOption('lineColor', value);\r\n    }\r\n\r\n\r\n    /**\r\n     * Specifies a width for a line on a sparkline. Available for the sparklines of the line- and area-like types.\r\n     */\r\n    @Input()\r\n    get lineWidth(): number {\r\n        return this._getOption('lineWidth');\r\n    }\r\n    set lineWidth(value: number) {\r\n        this._setOption('lineWidth', value);\r\n    }\r\n\r\n\r\n    /**\r\n     * Sets a color for the bars indicating the values that are less than the winloss threshold. Available for a sparkline of the winloss type only.\r\n     */\r\n    @Input()\r\n    get lossColor(): string {\r\n        return this._getOption('lossColor');\r\n    }\r\n    set lossColor(value: string) {\r\n        this._setOption('lossColor', value);\r\n    }\r\n\r\n\r\n    /**\r\n     * Generates space around the widget.\r\n     */\r\n    @Input()\r\n    get margin(): { bottom?: number, left?: number, right?: number, top?: number } {\r\n        return this._getOption('margin');\r\n    }\r\n    set margin(value: { bottom?: number, left?: number, right?: number, top?: number }) {\r\n        this._setOption('margin', value);\r\n    }\r\n\r\n\r\n    /**\r\n     * Sets a color for the boundary of the maximum point on a sparkline.\r\n     */\r\n    @Input()\r\n    get maxColor(): string {\r\n        return this._getOption('maxColor');\r\n    }\r\n    set maxColor(value: string) {\r\n        this._setOption('maxColor', value);\r\n    }\r\n\r\n\r\n    /**\r\n     * Specifies the maximum value of the sparkline's value axis.\r\n     */\r\n    @Input()\r\n    get maxValue(): number {\r\n        return this._getOption('maxValue');\r\n    }\r\n    set maxValue(value: number) {\r\n        this._setOption('maxValue', value);\r\n    }\r\n\r\n\r\n    /**\r\n     * Sets a color for the boundary of the minimum point on a sparkline.\r\n     */\r\n    @Input()\r\n    get minColor(): string {\r\n        return this._getOption('minColor');\r\n    }\r\n    set minColor(value: string) {\r\n        this._setOption('minColor', value);\r\n    }\r\n\r\n\r\n    /**\r\n     * Specifies the minimum value of the sparkline value axis.\r\n     */\r\n    @Input()\r\n    get minValue(): number {\r\n        return this._getOption('minValue');\r\n    }\r\n    set minValue(value: number) {\r\n        this._setOption('minValue', value);\r\n    }\r\n\r\n\r\n    /**\r\n     * Notifies the widget that it is embedded into an HTML page that uses a tag modifying the path.\r\n     */\r\n    @Input()\r\n    get pathModified(): boolean {\r\n        return this._getOption('pathModified');\r\n    }\r\n    set pathModified(value: boolean) {\r\n        this._setOption('pathModified', value);\r\n    }\r\n\r\n\r\n    /**\r\n     * Sets a color for points on a sparkline. Available for the sparklines of the line- and area-like types.\r\n     */\r\n    @Input()\r\n    get pointColor(): string {\r\n        return this._getOption('pointColor');\r\n    }\r\n    set pointColor(value: string) {\r\n        this._setOption('pointColor', value);\r\n    }\r\n\r\n\r\n    /**\r\n     * Specifies the diameter of sparkline points in pixels. Available for the sparklines of line- and area-like types.\r\n     */\r\n    @Input()\r\n    get pointSize(): number {\r\n        return this._getOption('pointSize');\r\n    }\r\n    set pointSize(value: number) {\r\n        this._setOption('pointSize', value);\r\n    }\r\n\r\n\r\n    /**\r\n     * Specifies a symbol to use as a point marker on a sparkline. Available for the sparklines of the line- and area-like types.\r\n     */\r\n    @Input()\r\n    get pointSymbol(): string {\r\n        return this._getOption('pointSymbol');\r\n    }\r\n    set pointSymbol(value: string) {\r\n        this._setOption('pointSymbol', value);\r\n    }\r\n\r\n\r\n    /**\r\n     * Switches the widget to a right-to-left representation.\r\n     */\r\n    @Input()\r\n    get rtlEnabled(): boolean {\r\n        return this._getOption('rtlEnabled');\r\n    }\r\n    set rtlEnabled(value: boolean) {\r\n        this._setOption('rtlEnabled', value);\r\n    }\r\n\r\n\r\n    /**\r\n     * Specifies whether or not to indicate both the first and last values on a sparkline.\r\n     */\r\n    @Input()\r\n    get showFirstLast(): boolean {\r\n        return this._getOption('showFirstLast');\r\n    }\r\n    set showFirstLast(value: boolean) {\r\n        this._setOption('showFirstLast', value);\r\n    }\r\n\r\n\r\n    /**\r\n     * Specifies whether or not to indicate both the minimum and maximum values on a sparkline.\r\n     */\r\n    @Input()\r\n    get showMinMax(): boolean {\r\n        return this._getOption('showMinMax');\r\n    }\r\n    set showMinMax(value: boolean) {\r\n        this._setOption('showMinMax', value);\r\n    }\r\n\r\n\r\n    /**\r\n     * Specifies the widget's size in pixels.\r\n     */\r\n    @Input()\r\n    get size(): { height?: number, width?: number } {\r\n        return this._getOption('size');\r\n    }\r\n    set size(value: { height?: number, width?: number }) {\r\n        this._setOption('size', value);\r\n    }\r\n\r\n\r\n    /**\r\n     * Sets the name of the theme the widget uses.\r\n     */\r\n    @Input()\r\n    get theme(): string {\r\n        return this._getOption('theme');\r\n    }\r\n    set theme(value: string) {\r\n        this._setOption('theme', value);\r\n    }\r\n\r\n\r\n    /**\r\n     * Configures the tooltip.\r\n     */\r\n    @Input()\r\n    get tooltip(): { arrowLength?: number, border?: { color?: string, dashStyle?: string, opacity?: number, visible?: boolean, width?: number }, color?: string, container?: Element | JQuery, cornerRadius?: number, customizeTooltip?: Function, enabled?: boolean, font?: DevExpress.viz.Font, format?: DevExpress.ui.format | string, opacity?: number, paddingLeftRight?: number, paddingTopBottom?: number, shadow?: { blur?: number, color?: string, offsetX?: number, offsetY?: number, opacity?: number }, zIndex?: number } {\r\n        return this._getOption('tooltip');\r\n    }\r\n    set tooltip(value: { arrowLength?: number, border?: { color?: string, dashStyle?: string, opacity?: number, visible?: boolean, width?: number }, color?: string, container?: Element | JQuery, cornerRadius?: number, customizeTooltip?: Function, enabled?: boolean, font?: DevExpress.viz.Font, format?: DevExpress.ui.format | string, opacity?: number, paddingLeftRight?: number, paddingTopBottom?: number, shadow?: { blur?: number, color?: string, offsetX?: number, offsetY?: number, opacity?: number }, zIndex?: number }) {\r\n        this._setOption('tooltip', value);\r\n    }\r\n\r\n\r\n    /**\r\n     * Determines the type of a sparkline.\r\n     */\r\n    @Input()\r\n    get type(): string {\r\n        return this._getOption('type');\r\n    }\r\n    set type(value: string) {\r\n        this._setOption('type', value);\r\n    }\r\n\r\n\r\n    /**\r\n     * Specifies the data source field that provides values for a sparkline.\r\n     */\r\n    @Input()\r\n    get valueField(): string {\r\n        return this._getOption('valueField');\r\n    }\r\n    set valueField(value: string) {\r\n        this._setOption('valueField', value);\r\n    }\r\n\r\n\r\n    /**\r\n     * Sets a color for the bars indicating the values greater than a winloss threshold. Available for a sparkline of the winloss type only.\r\n     */\r\n    @Input()\r\n    get winColor(): string {\r\n        return this._getOption('winColor');\r\n    }\r\n    set winColor(value: string) {\r\n        this._setOption('winColor', value);\r\n    }\r\n\r\n\r\n    /**\r\n     * Specifies a value that serves as a threshold for the sparkline of the winloss type.\r\n     */\r\n    @Input()\r\n    get winlossThreshold(): number {\r\n        return this._getOption('winlossThreshold');\r\n    }\r\n    set winlossThreshold(value: number) {\r\n        this._setOption('winlossThreshold', value);\r\n    }\r\n\r\n    /**\r\n     * A function that is executed before the widget is disposed of.\r\n     */\r\n    @Output() onDisposing: EventEmitter<any>;\r\n\r\n    /**\r\n     * A function that is executed when the widget's rendering has finished.\r\n     */\r\n    @Output() onDrawn: EventEmitter<any>;\r\n\r\n    /**\r\n     * A function that is executed after the widget is exported.\r\n     */\r\n    @Output() onExported: EventEmitter<any>;\r\n\r\n    /**\r\n     * A function that is executed before the widget is exported.\r\n     */\r\n    @Output() onExporting: EventEmitter<any>;\r\n\r\n    /**\r\n     * A function that is executed before a file with exported widget is saved to the user's local storage.\r\n     */\r\n    @Output() onFileSaving: EventEmitter<any>;\r\n\r\n    /**\r\n     * A function that is executed when an error or warning occurs.\r\n     */\r\n    @Output() onIncidentOccurred: EventEmitter<any>;\r\n\r\n    /**\r\n     * A function used in JavaScript frameworks to save the widget instance.\r\n     */\r\n    @Output() onInitialized: EventEmitter<any>;\r\n\r\n    /**\r\n     * A function that is executed after a widget option is changed.\r\n     */\r\n    @Output() onOptionChanged: EventEmitter<any>;\r\n\r\n    /**\r\n     * A function that is executed when a tooltip becomes hidden.\r\n     */\r\n    @Output() onTooltipHidden: EventEmitter<any>;\r\n\r\n    /**\r\n     * A function that is executed when a tooltip appears.\r\n     */\r\n    @Output() onTooltipShown: EventEmitter<any>;\r\n\r\n    /**\r\n     * A handler for the argumentFieldChange event.\r\n     */\r\n    @Output() argumentFieldChange: EventEmitter<string>;\r\n\r\n    /**\r\n     * A handler for the barNegativeColorChange event.\r\n     */\r\n    @Output() barNegativeColorChange: EventEmitter<string>;\r\n\r\n    /**\r\n     * A handler for the barPositiveColorChange event.\r\n     */\r\n    @Output() barPositiveColorChange: EventEmitter<string>;\r\n\r\n    /**\r\n     * A handler for the dataSourceChange event.\r\n     */\r\n    @Output() dataSourceChange: EventEmitter<DevExpress.data.DataSource | DevExpress.data.DataSourceOptions | string | Array<any>>;\r\n\r\n    /**\r\n     * A handler for the disabledChange event.\r\n     */\r\n    @Output() disabledChange: EventEmitter<boolean>;\r\n\r\n    /**\r\n     * A handler for the elementAttrChange event.\r\n     */\r\n    @Output() elementAttrChange: EventEmitter<any>;\r\n\r\n    /**\r\n     * A handler for the firstLastColorChange event.\r\n     */\r\n    @Output() firstLastColorChange: EventEmitter<string>;\r\n\r\n    /**\r\n     * A handler for the ignoreEmptyPointsChange event.\r\n     */\r\n    @Output() ignoreEmptyPointsChange: EventEmitter<boolean>;\r\n\r\n    /**\r\n     * A handler for the lineColorChange event.\r\n     */\r\n    @Output() lineColorChange: EventEmitter<string>;\r\n\r\n    /**\r\n     * A handler for the lineWidthChange event.\r\n     */\r\n    @Output() lineWidthChange: EventEmitter<number>;\r\n\r\n    /**\r\n     * A handler for the lossColorChange event.\r\n     */\r\n    @Output() lossColorChange: EventEmitter<string>;\r\n\r\n    /**\r\n     * A handler for the marginChange event.\r\n     */\r\n    @Output() marginChange: EventEmitter<{ bottom?: number, left?: number, right?: number, top?: number }>;\r\n\r\n    /**\r\n     * A handler for the maxColorChange event.\r\n     */\r\n    @Output() maxColorChange: EventEmitter<string>;\r\n\r\n    /**\r\n     * A handler for the maxValueChange event.\r\n     */\r\n    @Output() maxValueChange: EventEmitter<number>;\r\n\r\n    /**\r\n     * A handler for the minColorChange event.\r\n     */\r\n    @Output() minColorChange: EventEmitter<string>;\r\n\r\n    /**\r\n     * A handler for the minValueChange event.\r\n     */\r\n    @Output() minValueChange: EventEmitter<number>;\r\n\r\n    /**\r\n     * A handler for the pathModifiedChange event.\r\n     */\r\n    @Output() pathModifiedChange: EventEmitter<boolean>;\r\n\r\n    /**\r\n     * A handler for the pointColorChange event.\r\n     */\r\n    @Output() pointColorChange: EventEmitter<string>;\r\n\r\n    /**\r\n     * A handler for the pointSizeChange event.\r\n     */\r\n    @Output() pointSizeChange: EventEmitter<number>;\r\n\r\n    /**\r\n     * A handler for the pointSymbolChange event.\r\n     */\r\n    @Output() pointSymbolChange: EventEmitter<string>;\r\n\r\n    /**\r\n     * A handler for the rtlEnabledChange event.\r\n     */\r\n    @Output() rtlEnabledChange: EventEmitter<boolean>;\r\n\r\n    /**\r\n     * A handler for the showFirstLastChange event.\r\n     */\r\n    @Output() showFirstLastChange: EventEmitter<boolean>;\r\n\r\n    /**\r\n     * A handler for the showMinMaxChange event.\r\n     */\r\n    @Output() showMinMaxChange: EventEmitter<boolean>;\r\n\r\n    /**\r\n     * A handler for the sizeChange event.\r\n     */\r\n    @Output() sizeChange: EventEmitter<{ height?: number, width?: number }>;\r\n\r\n    /**\r\n     * A handler for the themeChange event.\r\n     */\r\n    @Output() themeChange: EventEmitter<string>;\r\n\r\n    /**\r\n     * A handler for the tooltipChange event.\r\n     */\r\n    @Output() tooltipChange: EventEmitter<{ arrowLength?: number, border?: { color?: string, dashStyle?: string, opacity?: number, visible?: boolean, width?: number }, color?: string, container?: Element | JQuery, cornerRadius?: number, customizeTooltip?: Function, enabled?: boolean, font?: DevExpress.viz.Font, format?: DevExpress.ui.format | string, opacity?: number, paddingLeftRight?: number, paddingTopBottom?: number, shadow?: { blur?: number, color?: string, offsetX?: number, offsetY?: number, opacity?: number }, zIndex?: number }>;\r\n\r\n    /**\r\n     * A handler for the typeChange event.\r\n     */\r\n    @Output() typeChange: EventEmitter<string>;\r\n\r\n    /**\r\n     * A handler for the valueFieldChange event.\r\n     */\r\n    @Output() valueFieldChange: EventEmitter<string>;\r\n\r\n    /**\r\n     * A handler for the winColorChange event.\r\n     */\r\n    @Output() winColorChange: EventEmitter<string>;\r\n\r\n    /**\r\n     * A handler for the winlossThresholdChange event.\r\n     */\r\n    @Output() winlossThresholdChange: EventEmitter<number>;\r\n\r\n\r\n\r\n\r\n\r\n    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost,\r\n            private _watcherHelper: WatcherHelper,\r\n            private _idh: IterableDifferHelper, optionHost: NestedOptionHost,\r\n            transferState: TransferState,\r\n            @Inject(PLATFORM_ID) platformId: any) {\r\n\r\n        super(elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);\r\n\r\n        this._createEventEmitters([\r\n            { subscribe: 'disposing', emit: 'onDisposing' },\r\n            { subscribe: 'drawn', emit: 'onDrawn' },\r\n            { subscribe: 'exported', emit: 'onExported' },\r\n            { subscribe: 'exporting', emit: 'onExporting' },\r\n            { subscribe: 'fileSaving', emit: 'onFileSaving' },\r\n            { subscribe: 'incidentOccurred', emit: 'onIncidentOccurred' },\r\n            { subscribe: 'initialized', emit: 'onInitialized' },\r\n            { subscribe: 'optionChanged', emit: 'onOptionChanged' },\r\n            { subscribe: 'tooltipHidden', emit: 'onTooltipHidden' },\r\n            { subscribe: 'tooltipShown', emit: 'onTooltipShown' },\r\n            { emit: 'argumentFieldChange' },\r\n            { emit: 'barNegativeColorChange' },\r\n            { emit: 'barPositiveColorChange' },\r\n            { emit: 'dataSourceChange' },\r\n            { emit: 'disabledChange' },\r\n            { emit: 'elementAttrChange' },\r\n            { emit: 'firstLastColorChange' },\r\n            { emit: 'ignoreEmptyPointsChange' },\r\n            { emit: 'lineColorChange' },\r\n            { emit: 'lineWidthChange' },\r\n            { emit: 'lossColorChange' },\r\n            { emit: 'marginChange' },\r\n            { emit: 'maxColorChange' },\r\n            { emit: 'maxValueChange' },\r\n            { emit: 'minColorChange' },\r\n            { emit: 'minValueChange' },\r\n            { emit: 'pathModifiedChange' },\r\n            { emit: 'pointColorChange' },\r\n            { emit: 'pointSizeChange' },\r\n            { emit: 'pointSymbolChange' },\r\n            { emit: 'rtlEnabledChange' },\r\n            { emit: 'showFirstLastChange' },\r\n            { emit: 'showMinMaxChange' },\r\n            { emit: 'sizeChange' },\r\n            { emit: 'themeChange' },\r\n            { emit: 'tooltipChange' },\r\n            { emit: 'typeChange' },\r\n            { emit: 'valueFieldChange' },\r\n            { emit: 'winColorChange' },\r\n            { emit: 'winlossThresholdChange' }\r\n        ]);\r\n\r\n        this._idh.setHost(this);\r\n        optionHost.setHost(this);\r\n    }\r\n\r\n    protected _createInstance(element, options) {\r\n        return new DxSparkline(element, options);\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this._destroyWidget();\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        super.ngOnChanges(changes);\r\n        this.setupChanges('dataSource', changes);\r\n    }\r\n\r\n    setupChanges(prop: string, changes: SimpleChanges) {\r\n        if (!(prop in this._optionsToUpdate)) {\r\n            this._idh.setup(prop, changes);\r\n        }\r\n    }\r\n\r\n    ngDoCheck() {\r\n        this._idh.doCheck('dataSource');\r\n        this._watcherHelper.checkWatchers();\r\n        super.ngDoCheck();\r\n        super.clearChangedOptions();\r\n    }\r\n\r\n    _setOption(name: string, value: any) {\r\n        let isSetup = this._idh.setupSingle(name, value);\r\n        let isChanged = this._idh.getChanges(name, value) !== null;\r\n\r\n        if (isSetup || isChanged) {\r\n            super._setOption(name, value);\r\n        }\r\n    }\r\n\r\n}\r\n\r\n@NgModule({\r\n  imports: [\r\n    DxoMarginModule,\r\n    DxoSizeModule,\r\n    DxoTooltipModule,\r\n    DxoBorderModule,\r\n    DxoFontModule,\r\n    DxoFormatModule,\r\n    DxoShadowModule,\r\n    DxIntegrationModule,\r\n    DxTemplateModule,\r\n    BrowserTransferStateModule\r\n  ],\r\n  declarations: [\r\n    DxSparklineComponent\r\n  ],\r\n  exports: [\r\n    DxSparklineComponent,\r\n    DxoMarginModule,\r\n    DxoSizeModule,\r\n    DxoTooltipModule,\r\n    DxoBorderModule,\r\n    DxoFontModule,\r\n    DxoFormatModule,\r\n    DxoShadowModule,\r\n    DxTemplateModule\r\n  ]\r\n})\r\nexport class DxSparklineModule { }\r\n"]}
{"version":3,"file":"slide-out-view.js","sourceRoot":"","sources":["slide-out-view.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * devextreme-angular\n * Version: 19.1.6\n * Build date: Thu Sep 19 2019\n *\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\n *\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file in the root of the project for details.\n *\n * https://github.com/DevExpress/devextreme-angular\n */\n\n/* tslint:disable:max-line-length */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport { BrowserTransferStateModule } from '@angular/platform-browser';\r\nimport { TransferState } from '@angular/platform-browser';\r\n\r\nimport {\r\n    Component,\r\n    NgModule,\r\n    ElementRef,\r\n    NgZone,\r\n    PLATFORM_ID,\r\n    Inject,\r\n\r\n    Input,\r\n    Output,\r\n    OnDestroy,\r\n    EventEmitter\r\n} from '@angular/core';\r\n\r\n\r\n\r\nimport DxSlideOutView from 'devextreme/ui/slide_out_view';\r\n\r\n\r\nimport { DxComponent } from '../core/component';\r\nimport { DxTemplateHost } from '../core/template-host';\r\nimport { DxIntegrationModule } from '../core/integration';\r\nimport { DxTemplateModule } from '../core/template';\r\nimport { NestedOptionHost } from '../core/nested-option';\r\nimport { WatcherHelper } from '../core/watcher-helper';\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * The SlideOutView widget is a classic slide-out menu paired with a view. This widget is very similar to the SlideOut with only one difference - the SlideOut always contains the List in the slide-out menu, while the SlideOutView can hold any collection there.\r\n */\r\n@Component({\r\n    selector: 'dx-slide-out-view',\r\n    template: '<ng-content></ng-content>',\r\n    providers: [\r\n        DxTemplateHost,\r\n        WatcherHelper,\r\n        NestedOptionHost\r\n    ]\r\n})\r\nexport class DxSlideOutViewComponent extends DxComponent implements OnDestroy {\r\n    instance: DxSlideOutView;\r\n\r\n\r\n    /**\r\n     * Specifies whether or not the widget changes its state when interacting with a user.\r\n     */\r\n    @Input()\r\n    get activeStateEnabled(): boolean {\r\n        return this._getOption('activeStateEnabled');\r\n    }\r\n    set activeStateEnabled(value: boolean) {\r\n        this._setOption('activeStateEnabled', value);\r\n    }\r\n\r\n\r\n    /**\r\n     * Specifies a custom template for the widget content.\r\n     */\r\n    @Input()\r\n    get contentTemplate(): any {\r\n        return this._getOption('contentTemplate');\r\n    }\r\n    set contentTemplate(value: any) {\r\n        this._setOption('contentTemplate', value);\r\n    }\r\n\r\n\r\n    /**\r\n     * Specifies whether the widget responds to user interaction.\r\n     */\r\n    @Input()\r\n    get disabled(): boolean {\r\n        return this._getOption('disabled');\r\n    }\r\n    set disabled(value: boolean) {\r\n        this._setOption('disabled', value);\r\n    }\r\n\r\n\r\n    /**\r\n     * Specifies the attributes to be attached to the widget's root element.\r\n     */\r\n    @Input()\r\n    get elementAttr(): any {\r\n        return this._getOption('elementAttr');\r\n    }\r\n    set elementAttr(value: any) {\r\n        this._setOption('elementAttr', value);\r\n    }\r\n\r\n\r\n    /**\r\n     * Specifies the widget's height.\r\n     */\r\n    @Input()\r\n    get height(): number | Function | string {\r\n        return this._getOption('height');\r\n    }\r\n    set height(value: number | Function | string) {\r\n        this._setOption('height', value);\r\n    }\r\n\r\n\r\n    /**\r\n     * Specifies text for a hint that appears when a user pauses on the widget.\r\n     */\r\n    @Input()\r\n    get hint(): string {\r\n        return this._getOption('hint');\r\n    }\r\n    set hint(value: string) {\r\n        this._setOption('hint', value);\r\n    }\r\n\r\n\r\n    /**\r\n     * Specifies whether the widget changes its state when a user pauses on it.\r\n     */\r\n    @Input()\r\n    get hoverStateEnabled(): boolean {\r\n        return this._getOption('hoverStateEnabled');\r\n    }\r\n    set hoverStateEnabled(value: boolean) {\r\n        this._setOption('hoverStateEnabled', value);\r\n    }\r\n\r\n\r\n    /**\r\n     * Specifies the current menu position.\r\n     */\r\n    @Input()\r\n    get menuPosition(): string {\r\n        return this._getOption('menuPosition');\r\n    }\r\n    set menuPosition(value: string) {\r\n        this._setOption('menuPosition', value);\r\n    }\r\n\r\n\r\n    /**\r\n     * Specifies a custom template for the menu content.\r\n     */\r\n    @Input()\r\n    get menuTemplate(): any {\r\n        return this._getOption('menuTemplate');\r\n    }\r\n    set menuTemplate(value: any) {\r\n        this._setOption('menuTemplate', value);\r\n    }\r\n\r\n\r\n    /**\r\n     * Specifies whether or not the menu panel is visible.\r\n     */\r\n    @Input()\r\n    get menuVisible(): boolean {\r\n        return this._getOption('menuVisible');\r\n    }\r\n    set menuVisible(value: boolean) {\r\n        this._setOption('menuVisible', value);\r\n    }\r\n\r\n\r\n    /**\r\n     * Switches the widget to a right-to-left representation.\r\n     */\r\n    @Input()\r\n    get rtlEnabled(): boolean {\r\n        return this._getOption('rtlEnabled');\r\n    }\r\n    set rtlEnabled(value: boolean) {\r\n        this._setOption('rtlEnabled', value);\r\n    }\r\n\r\n\r\n    /**\r\n     * Specifies whether or not the menu is shown when a user swipes the widget content.\r\n     */\r\n    @Input()\r\n    get swipeEnabled(): boolean {\r\n        return this._getOption('swipeEnabled');\r\n    }\r\n    set swipeEnabled(value: boolean) {\r\n        this._setOption('swipeEnabled', value);\r\n    }\r\n\r\n\r\n    /**\r\n     * Specifies whether the widget is visible.\r\n     */\r\n    @Input()\r\n    get visible(): boolean {\r\n        return this._getOption('visible');\r\n    }\r\n    set visible(value: boolean) {\r\n        this._setOption('visible', value);\r\n    }\r\n\r\n\r\n    /**\r\n     * Specifies the widget's width.\r\n     */\r\n    @Input()\r\n    get width(): number | Function | string {\r\n        return this._getOption('width');\r\n    }\r\n    set width(value: number | Function | string) {\r\n        this._setOption('width', value);\r\n    }\r\n\r\n    /**\r\n     * A function that is executed before the widget is disposed of.\r\n     */\r\n    @Output() onDisposing: EventEmitter<any>;\r\n\r\n    /**\r\n     * A function used in JavaScript frameworks to save the widget instance.\r\n     */\r\n    @Output() onInitialized: EventEmitter<any>;\r\n\r\n    /**\r\n     * A function that is executed after a widget option is changed.\r\n     */\r\n    @Output() onOptionChanged: EventEmitter<any>;\r\n\r\n    /**\r\n     * A handler for the activeStateEnabledChange event.\r\n     */\r\n    @Output() activeStateEnabledChange: EventEmitter<boolean>;\r\n\r\n    /**\r\n     * A handler for the contentTemplateChange event.\r\n     */\r\n    @Output() contentTemplateChange: EventEmitter<any>;\r\n\r\n    /**\r\n     * A handler for the disabledChange event.\r\n     */\r\n    @Output() disabledChange: EventEmitter<boolean>;\r\n\r\n    /**\r\n     * A handler for the elementAttrChange event.\r\n     */\r\n    @Output() elementAttrChange: EventEmitter<any>;\r\n\r\n    /**\r\n     * A handler for the heightChange event.\r\n     */\r\n    @Output() heightChange: EventEmitter<number | Function | string>;\r\n\r\n    /**\r\n     * A handler for the hintChange event.\r\n     */\r\n    @Output() hintChange: EventEmitter<string>;\r\n\r\n    /**\r\n     * A handler for the hoverStateEnabledChange event.\r\n     */\r\n    @Output() hoverStateEnabledChange: EventEmitter<boolean>;\r\n\r\n    /**\r\n     * A handler for the menuPositionChange event.\r\n     */\r\n    @Output() menuPositionChange: EventEmitter<string>;\r\n\r\n    /**\r\n     * A handler for the menuTemplateChange event.\r\n     */\r\n    @Output() menuTemplateChange: EventEmitter<any>;\r\n\r\n    /**\r\n     * A handler for the menuVisibleChange event.\r\n     */\r\n    @Output() menuVisibleChange: EventEmitter<boolean>;\r\n\r\n    /**\r\n     * A handler for the rtlEnabledChange event.\r\n     */\r\n    @Output() rtlEnabledChange: EventEmitter<boolean>;\r\n\r\n    /**\r\n     * A handler for the swipeEnabledChange event.\r\n     */\r\n    @Output() swipeEnabledChange: EventEmitter<boolean>;\r\n\r\n    /**\r\n     * A handler for the visibleChange event.\r\n     */\r\n    @Output() visibleChange: EventEmitter<boolean>;\r\n\r\n    /**\r\n     * A handler for the widthChange event.\r\n     */\r\n    @Output() widthChange: EventEmitter<number | Function | string>;\r\n\r\n\r\n\r\n\r\n\r\n    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost,\r\n            _watcherHelper: WatcherHelper, optionHost: NestedOptionHost,\r\n            transferState: TransferState,\r\n            @Inject(PLATFORM_ID) platformId: any) {\r\n\r\n        super(elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);\r\n\r\n        this._createEventEmitters([\r\n            { subscribe: 'disposing', emit: 'onDisposing' },\r\n            { subscribe: 'initialized', emit: 'onInitialized' },\r\n            { subscribe: 'optionChanged', emit: 'onOptionChanged' },\r\n            { emit: 'activeStateEnabledChange' },\r\n            { emit: 'contentTemplateChange' },\r\n            { emit: 'disabledChange' },\r\n            { emit: 'elementAttrChange' },\r\n            { emit: 'heightChange' },\r\n            { emit: 'hintChange' },\r\n            { emit: 'hoverStateEnabledChange' },\r\n            { emit: 'menuPositionChange' },\r\n            { emit: 'menuTemplateChange' },\r\n            { emit: 'menuVisibleChange' },\r\n            { emit: 'rtlEnabledChange' },\r\n            { emit: 'swipeEnabledChange' },\r\n            { emit: 'visibleChange' },\r\n            { emit: 'widthChange' }\r\n        ]);\r\n        optionHost.setHost(this);\r\n    }\r\n\r\n    protected _createInstance(element, options) {\r\n        return new DxSlideOutView(element, options);\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this._destroyWidget();\r\n    }\r\n\r\n\r\n}\r\n\r\n@NgModule({\r\n  imports: [\r\n    DxIntegrationModule,\r\n    DxTemplateModule,\r\n    BrowserTransferStateModule\r\n  ],\r\n  declarations: [\r\n    DxSlideOutViewComponent\r\n  ],\r\n  exports: [\r\n    DxSlideOutViewComponent,\r\n    DxTemplateModule\r\n  ]\r\n})\r\nexport class DxSlideOutViewModule { }\r\n"]}
{"version":3,"file":"drawer.js","sourceRoot":"","sources":["drawer.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * devextreme-angular\n * Version: 19.1.6\n * Build date: Thu Sep 19 2019\n *\n * Copyright (c) 2012 - 2019 Developer Express Inc. ALL RIGHTS RESERVED\n *\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file in the root of the project for details.\n *\n * https://github.com/DevExpress/devextreme-angular\n */\n\n/* tslint:disable:max-line-length */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport { BrowserTransferStateModule } from '@angular/platform-browser';\r\nimport { TransferState } from '@angular/platform-browser';\r\n\r\nimport {\r\n    Component,\r\n    NgModule,\r\n    ElementRef,\r\n    NgZone,\r\n    PLATFORM_ID,\r\n    Inject,\r\n\r\n    Input,\r\n    Output,\r\n    OnDestroy,\r\n    EventEmitter\r\n} from '@angular/core';\r\n\r\n\r\n\r\nimport DxDrawer from 'devextreme/ui/drawer';\r\n\r\n\r\nimport { DxComponent } from '../core/component';\r\nimport { DxTemplateHost } from '../core/template-host';\r\nimport { DxIntegrationModule } from '../core/integration';\r\nimport { DxTemplateModule } from '../core/template';\r\nimport { NestedOptionHost } from '../core/nested-option';\r\nimport { WatcherHelper } from '../core/watcher-helper';\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * The Drawer is a dismissible or permanently visible panel used for navigation in responsive web application layouts.\r\n */\r\n@Component({\r\n    selector: 'dx-drawer',\r\n    template: '<ng-content></ng-content>',\r\n    providers: [\r\n        DxTemplateHost,\r\n        WatcherHelper,\r\n        NestedOptionHost\r\n    ]\r\n})\r\nexport class DxDrawerComponent extends DxComponent implements OnDestroy {\r\n    instance: DxDrawer;\r\n\r\n\r\n    /**\r\n     * Specifies whether or not the widget changes its state when interacting with a user.\r\n     */\r\n    @Input()\r\n    get activeStateEnabled(): boolean {\r\n        return this._getOption('activeStateEnabled');\r\n    }\r\n    set activeStateEnabled(value: boolean) {\r\n        this._setOption('activeStateEnabled', value);\r\n    }\r\n\r\n\r\n    /**\r\n     * Specifies the duration of the drawer's opening and closing animation (in milliseconds). Applies only if animationEnabled is true.\r\n     */\r\n    @Input()\r\n    get animationDuration(): number {\r\n        return this._getOption('animationDuration');\r\n    }\r\n    set animationDuration(value: number) {\r\n        this._setOption('animationDuration', value);\r\n    }\r\n\r\n\r\n    /**\r\n     * Specifies whether to use an opening and closing animation.\r\n     */\r\n    @Input()\r\n    get animationEnabled(): boolean {\r\n        return this._getOption('animationEnabled');\r\n    }\r\n    set animationEnabled(value: boolean) {\r\n        this._setOption('animationEnabled', value);\r\n    }\r\n\r\n\r\n    /**\r\n     * Specifies whether to close the drawer if a user clicks or taps the view area.\r\n     */\r\n    @Input()\r\n    get closeOnOutsideClick(): boolean | Function {\r\n        return this._getOption('closeOnOutsideClick');\r\n    }\r\n    set closeOnOutsideClick(value: boolean | Function) {\r\n        this._setOption('closeOnOutsideClick', value);\r\n    }\r\n\r\n\r\n    /**\r\n     * Specifies whether the widget responds to user interaction.\r\n     */\r\n    @Input()\r\n    get disabled(): boolean {\r\n        return this._getOption('disabled');\r\n    }\r\n    set disabled(value: boolean) {\r\n        this._setOption('disabled', value);\r\n    }\r\n\r\n\r\n    /**\r\n     * Specifies the attributes to be attached to the widget's root element.\r\n     */\r\n    @Input()\r\n    get elementAttr(): any {\r\n        return this._getOption('elementAttr');\r\n    }\r\n    set elementAttr(value: any) {\r\n        this._setOption('elementAttr', value);\r\n    }\r\n\r\n\r\n    /**\r\n     * Specifies the widget's height.\r\n     */\r\n    @Input()\r\n    get height(): number | Function | string {\r\n        return this._getOption('height');\r\n    }\r\n    set height(value: number | Function | string) {\r\n        this._setOption('height', value);\r\n    }\r\n\r\n\r\n    /**\r\n     * Specifies text for a hint that appears when a user pauses on the widget.\r\n     */\r\n    @Input()\r\n    get hint(): string {\r\n        return this._getOption('hint');\r\n    }\r\n    set hint(value: string) {\r\n        this._setOption('hint', value);\r\n    }\r\n\r\n\r\n    /**\r\n     * Specifies whether the widget changes its state when a user pauses on it.\r\n     */\r\n    @Input()\r\n    get hoverStateEnabled(): boolean {\r\n        return this._getOption('hoverStateEnabled');\r\n    }\r\n    set hoverStateEnabled(value: boolean) {\r\n        this._setOption('hoverStateEnabled', value);\r\n    }\r\n\r\n\r\n    /**\r\n     * Specifies the drawer's width or height (depending on the drawer's position) in the opened state.\r\n     */\r\n    @Input()\r\n    get maxSize(): number {\r\n        return this._getOption('maxSize');\r\n    }\r\n    set maxSize(value: number) {\r\n        this._setOption('maxSize', value);\r\n    }\r\n\r\n\r\n    /**\r\n     * Specifies the drawer's width or height (depending on the drawer's position) in the closed state.\r\n     */\r\n    @Input()\r\n    get minSize(): number {\r\n        return this._getOption('minSize');\r\n    }\r\n    set minSize(value: number) {\r\n        this._setOption('minSize', value);\r\n    }\r\n\r\n\r\n    /**\r\n     * Specifies whether the drawer is opened.\r\n     */\r\n    @Input()\r\n    get opened(): boolean {\r\n        return this._getOption('opened');\r\n    }\r\n    set opened(value: boolean) {\r\n        this._setOption('opened', value);\r\n    }\r\n\r\n\r\n    /**\r\n     * Specifies how the drawer interacts with the view in the opened state.\r\n     */\r\n    @Input()\r\n    get openedStateMode(): string {\r\n        return this._getOption('openedStateMode');\r\n    }\r\n    set openedStateMode(value: string) {\r\n        this._setOption('openedStateMode', value);\r\n    }\r\n\r\n\r\n    /**\r\n     * Specifies the drawer's position in relation to the view.\r\n     */\r\n    @Input()\r\n    get position(): string {\r\n        return this._getOption('position');\r\n    }\r\n    set position(value: string) {\r\n        this._setOption('position', value);\r\n    }\r\n\r\n\r\n    /**\r\n     * Specifies the drawer's reveal mode.\r\n     */\r\n    @Input()\r\n    get revealMode(): string {\r\n        return this._getOption('revealMode');\r\n    }\r\n    set revealMode(value: string) {\r\n        this._setOption('revealMode', value);\r\n    }\r\n\r\n\r\n    /**\r\n     * Switches the widget to a right-to-left representation.\r\n     */\r\n    @Input()\r\n    get rtlEnabled(): boolean {\r\n        return this._getOption('rtlEnabled');\r\n    }\r\n    set rtlEnabled(value: boolean) {\r\n        this._setOption('rtlEnabled', value);\r\n    }\r\n\r\n\r\n    /**\r\n     * Specifies whether to shade the view when the drawer is opened.\r\n     */\r\n    @Input()\r\n    get shading(): boolean {\r\n        return this._getOption('shading');\r\n    }\r\n    set shading(value: boolean) {\r\n        this._setOption('shading', value);\r\n    }\r\n\r\n\r\n    /**\r\n     * Specifies the target element associated with the drawer. Applies only when the openedStateMode is \"overlap\".\r\n     */\r\n    @Input()\r\n    get target(): Element | JQuery {\r\n        return this._getOption('target');\r\n    }\r\n    set target(value: Element | JQuery) {\r\n        this._setOption('target', value);\r\n    }\r\n\r\n\r\n    /**\r\n     * Specifies the drawer's content.\r\n     */\r\n    @Input()\r\n    get template(): any {\r\n        return this._getOption('template');\r\n    }\r\n    set template(value: any) {\r\n        this._setOption('template', value);\r\n    }\r\n\r\n\r\n    /**\r\n     * Specifies whether the widget is visible.\r\n     */\r\n    @Input()\r\n    get visible(): boolean {\r\n        return this._getOption('visible');\r\n    }\r\n    set visible(value: boolean) {\r\n        this._setOption('visible', value);\r\n    }\r\n\r\n\r\n    /**\r\n     * Specifies the widget's width.\r\n     */\r\n    @Input()\r\n    get width(): number | Function | string {\r\n        return this._getOption('width');\r\n    }\r\n    set width(value: number | Function | string) {\r\n        this._setOption('width', value);\r\n    }\r\n\r\n    /**\r\n     * A function that is executed before the widget is disposed of.\r\n     */\r\n    @Output() onDisposing: EventEmitter<any>;\r\n\r\n    /**\r\n     * A function used in JavaScript frameworks to save the widget instance.\r\n     */\r\n    @Output() onInitialized: EventEmitter<any>;\r\n\r\n    /**\r\n     * A function that is executed after a widget option is changed.\r\n     */\r\n    @Output() onOptionChanged: EventEmitter<any>;\r\n\r\n    /**\r\n     * A handler for the activeStateEnabledChange event.\r\n     */\r\n    @Output() activeStateEnabledChange: EventEmitter<boolean>;\r\n\r\n    /**\r\n     * A handler for the animationDurationChange event.\r\n     */\r\n    @Output() animationDurationChange: EventEmitter<number>;\r\n\r\n    /**\r\n     * A handler for the animationEnabledChange event.\r\n     */\r\n    @Output() animationEnabledChange: EventEmitter<boolean>;\r\n\r\n    /**\r\n     * A handler for the closeOnOutsideClickChange event.\r\n     */\r\n    @Output() closeOnOutsideClickChange: EventEmitter<boolean | Function>;\r\n\r\n    /**\r\n     * A handler for the disabledChange event.\r\n     */\r\n    @Output() disabledChange: EventEmitter<boolean>;\r\n\r\n    /**\r\n     * A handler for the elementAttrChange event.\r\n     */\r\n    @Output() elementAttrChange: EventEmitter<any>;\r\n\r\n    /**\r\n     * A handler for the heightChange event.\r\n     */\r\n    @Output() heightChange: EventEmitter<number | Function | string>;\r\n\r\n    /**\r\n     * A handler for the hintChange event.\r\n     */\r\n    @Output() hintChange: EventEmitter<string>;\r\n\r\n    /**\r\n     * A handler for the hoverStateEnabledChange event.\r\n     */\r\n    @Output() hoverStateEnabledChange: EventEmitter<boolean>;\r\n\r\n    /**\r\n     * A handler for the maxSizeChange event.\r\n     */\r\n    @Output() maxSizeChange: EventEmitter<number>;\r\n\r\n    /**\r\n     * A handler for the minSizeChange event.\r\n     */\r\n    @Output() minSizeChange: EventEmitter<number>;\r\n\r\n    /**\r\n     * A handler for the openedChange event.\r\n     */\r\n    @Output() openedChange: EventEmitter<boolean>;\r\n\r\n    /**\r\n     * A handler for the openedStateModeChange event.\r\n     */\r\n    @Output() openedStateModeChange: EventEmitter<string>;\r\n\r\n    /**\r\n     * A handler for the positionChange event.\r\n     */\r\n    @Output() positionChange: EventEmitter<string>;\r\n\r\n    /**\r\n     * A handler for the revealModeChange event.\r\n     */\r\n    @Output() revealModeChange: EventEmitter<string>;\r\n\r\n    /**\r\n     * A handler for the rtlEnabledChange event.\r\n     */\r\n    @Output() rtlEnabledChange: EventEmitter<boolean>;\r\n\r\n    /**\r\n     * A handler for the shadingChange event.\r\n     */\r\n    @Output() shadingChange: EventEmitter<boolean>;\r\n\r\n    /**\r\n     * A handler for the targetChange event.\r\n     */\r\n    @Output() targetChange: EventEmitter<Element | JQuery>;\r\n\r\n    /**\r\n     * A handler for the templateChange event.\r\n     */\r\n    @Output() templateChange: EventEmitter<any>;\r\n\r\n    /**\r\n     * A handler for the visibleChange event.\r\n     */\r\n    @Output() visibleChange: EventEmitter<boolean>;\r\n\r\n    /**\r\n     * A handler for the widthChange event.\r\n     */\r\n    @Output() widthChange: EventEmitter<number | Function | string>;\r\n\r\n\r\n\r\n\r\n\r\n    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost,\r\n            _watcherHelper: WatcherHelper, optionHost: NestedOptionHost,\r\n            transferState: TransferState,\r\n            @Inject(PLATFORM_ID) platformId: any) {\r\n\r\n        super(elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);\r\n\r\n        this._createEventEmitters([\r\n            { subscribe: 'disposing', emit: 'onDisposing' },\r\n            { subscribe: 'initialized', emit: 'onInitialized' },\r\n            { subscribe: 'optionChanged', emit: 'onOptionChanged' },\r\n            { emit: 'activeStateEnabledChange' },\r\n            { emit: 'animationDurationChange' },\r\n            { emit: 'animationEnabledChange' },\r\n            { emit: 'closeOnOutsideClickChange' },\r\n            { emit: 'disabledChange' },\r\n            { emit: 'elementAttrChange' },\r\n            { emit: 'heightChange' },\r\n            { emit: 'hintChange' },\r\n            { emit: 'hoverStateEnabledChange' },\r\n            { emit: 'maxSizeChange' },\r\n            { emit: 'minSizeChange' },\r\n            { emit: 'openedChange' },\r\n            { emit: 'openedStateModeChange' },\r\n            { emit: 'positionChange' },\r\n            { emit: 'revealModeChange' },\r\n            { emit: 'rtlEnabledChange' },\r\n            { emit: 'shadingChange' },\r\n            { emit: 'targetChange' },\r\n            { emit: 'templateChange' },\r\n            { emit: 'visibleChange' },\r\n            { emit: 'widthChange' }\r\n        ]);\r\n        optionHost.setHost(this);\r\n    }\r\n\r\n    protected _createInstance(element, options) {\r\n        return new DxDrawer(element, options);\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this._destroyWidget();\r\n    }\r\n\r\n\r\n}\r\n\r\n@NgModule({\r\n  imports: [\r\n    DxIntegrationModule,\r\n    DxTemplateModule,\r\n    BrowserTransferStateModule\r\n  ],\r\n  declarations: [\r\n    DxDrawerComponent\r\n  ],\r\n  exports: [\r\n    DxDrawerComponent,\r\n    DxTemplateModule\r\n  ]\r\n})\r\nexport class DxDrawerModule { }\r\n"]}